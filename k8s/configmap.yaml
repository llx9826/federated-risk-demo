apiVersion: v1
kind: ConfigMap
metadata:
  name: federated-risk-config
  namespace: federated-risk
  labels:
    app.kubernetes.io/name: federated-risk-demo
    app.kubernetes.io/component: config
data:
  # 数据库配置
  DATABASE_URL: "postgresql://federated_user:federated_pass@postgres:5432/federated_risk"
  DATABASE_POOL_SIZE: "20"
  DATABASE_MAX_OVERFLOW: "10"
  
  # Redis配置
  REDIS_URL: "redis://redis:6379/0"
  REDIS_POOL_SIZE: "10"
  
  # 服务发现配置
  CONSENT_GATEWAY_URL: "http://consent-gateway:8001"
  FEDERATED_ORCHESTRATOR_URL: "http://federated-orchestrator:8002"
  PSI_SERVICE_URL: "http://psi-service:8003"
  MODEL_TRAINER_URL: "http://model-trainer:8004"
  MODEL_EXPLAINER_URL: "http://model-explainer:8005"
  MODEL_DEPLOYMENT_URL: "http://model-deployment:8006"
  AUDIT_SERVICE_URL: "http://audit-service:8007"
  API_GATEWAY_URL: "http://api-gateway:8000"
  
  # 日志配置
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"
  
  # 监控配置
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
  HEALTH_CHECK_INTERVAL: "30"
  
  # 安全配置
  CORS_ORIGINS: "http://localhost:3000,http://localhost:8080"
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_WINDOW: "60"
  
  # 联邦学习配置
  FL_MIN_PARTICIPANTS: "2"
  FL_MAX_PARTICIPANTS: "10"
  FL_ROUND_TIMEOUT: "300"
  FL_CONVERGENCE_THRESHOLD: "0.001"
  
  # PSI配置
  PSI_DEFAULT_ALGORITHM: "ecdh"
  PSI_HASH_FUNCTION: "sha256"
  PSI_CURVE: "secp256r1"
  
  # 隐私配置
  DIFFERENTIAL_PRIVACY_ENABLED: "true"
  DP_NOISE_MULTIPLIER: "0.1"
  DP_L2_NORM_CLIP: "1.0"
  
  # 审计配置
  AUDIT_ENABLED: "true"
  AUDIT_RETENTION_DAYS: "90"
  COMPLIANCE_CHECK_ENABLED: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: federated-risk
  labels:
    app.kubernetes.io/name: federated-risk-demo
    app.kubernetes.io/component: nginx-config
data:
  nginx.conf: |
    upstream api_gateway {
        server api-gateway:8000;
    }
    
    upstream frontend {
        server frontend:3000;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        # 前端路由
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # API路由
        location /api/ {
            proxy_pass http://api_gateway/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时配置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 缓冲配置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # 静态文件缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: federated-risk
  labels:
    app.kubernetes.io/name: federated-risk-demo
    app.kubernetes.io/component: postgres-init
data:
  init.sql: |
    -- 创建数据库和用户
    CREATE DATABASE federated_risk;
    CREATE USER federated_user WITH PASSWORD 'federated_pass';
    GRANT ALL PRIVILEGES ON DATABASE federated_risk TO federated_user;
    
    -- 连接到新数据库
    \c federated_risk;
    
    -- 创建扩展
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    
    -- 创建基础表结构
    
    -- 用户同意表
    CREATE TABLE IF NOT EXISTS user_consents (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id VARCHAR(255) NOT NULL,
        consent_type VARCHAR(100) NOT NULL,
        purpose TEXT NOT NULL,
        granted BOOLEAN NOT NULL DEFAULT false,
        granted_at TIMESTAMP,
        expires_at TIMESTAMP,
        revoked_at TIMESTAMP,
        metadata JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- 联邦训练会话表
    CREATE TABLE IF NOT EXISTS training_sessions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        session_id VARCHAR(255) UNIQUE NOT NULL,
        algorithm VARCHAR(100) NOT NULL,
        status VARCHAR(50) NOT NULL DEFAULT 'pending',
        participants JSONB NOT NULL,
        config JSONB NOT NULL,
        metrics JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP
    );
    
    -- PSI会话表
    CREATE TABLE IF NOT EXISTS psi_sessions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        session_id VARCHAR(255) UNIQUE NOT NULL,
        algorithm VARCHAR(100) NOT NULL,
        participants JSONB NOT NULL,
        status VARCHAR(50) NOT NULL DEFAULT 'pending',
        config JSONB,
        result_size INTEGER,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP
    );
    
    -- 模型部署表
    CREATE TABLE IF NOT EXISTS model_deployments (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        deployment_id VARCHAR(255) UNIQUE NOT NULL,
        model_name VARCHAR(255) NOT NULL,
        model_version VARCHAR(100) NOT NULL,
        status VARCHAR(50) NOT NULL DEFAULT 'pending',
        config JSONB NOT NULL,
        metrics JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        deployed_at TIMESTAMP
    );
    
    -- 审计日志表
    CREATE TABLE IF NOT EXISTS audit_logs (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        event_type VARCHAR(100) NOT NULL,
        entity_type VARCHAR(100) NOT NULL,
        entity_id VARCHAR(255) NOT NULL,
        user_id VARCHAR(255),
        action VARCHAR(100) NOT NULL,
        details JSONB,
        ip_address INET,
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- 创建索引
    CREATE INDEX IF NOT EXISTS idx_user_consents_user_id ON user_consents(user_id);
    CREATE INDEX IF NOT EXISTS idx_user_consents_type ON user_consents(consent_type);
    CREATE INDEX IF NOT EXISTS idx_training_sessions_status ON training_sessions(status);
    CREATE INDEX IF NOT EXISTS idx_psi_sessions_status ON psi_sessions(status);
    CREATE INDEX IF NOT EXISTS idx_model_deployments_status ON model_deployments(status);
    CREATE INDEX IF NOT EXISTS idx_audit_logs_event_type ON audit_logs(event_type);
    CREATE INDEX IF NOT EXISTS idx_audit_logs_entity ON audit_logs(entity_type, entity_id);
    CREATE INDEX IF NOT EXISTS idx_audit_logs_created_at ON audit_logs(created_at);
    
    -- 授权
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO federated_user;
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO federated_user;